// Code generated by go run github.com/nfx/slrp/ql/generator/main.go Foo. DO NOT EDIT.
package history

import (
	"github.com/nfx/slrp/ql/eval"
)

type RequestDataset []Request

func (d RequestDataset) Query(query string) (*eval.QueryResult[Request], error) {
	return (&eval.Dataset[Request, RequestDataset]{
		Source: d,
		Accessors: eval.Accessors{
			"ID":         eval.NumberGetter{Name: "ID", Func: d.getID},
			"Serial":     eval.NumberGetter{Name: "Serial", Func: d.getSerial},
			"Attempt":    eval.NumberGetter{Name: "Attempt", Func: d.getAttempt},
			"Ts":         eval.NumberGetter{Name: "Ts", Func: d.getTs},
			"Method":     eval.StringGetter{Name: "Method", Func: d.getMethod},
			"URL":        eval.StringGetter{Name: "URL", Func: d.getURL},
			"StatusCode": eval.NumberGetter{Name: "StatusCode", Func: d.getStatusCode},
			"Status":     eval.StringGetter{Name: "Status", Func: d.getStatus},
			"Proxy":      eval.StringGetter{Name: "Proxy", Func: d.getProxy},
			"Appeared":   eval.NumberGetter{Name: "Appeared", Func: d.getAppeared},
			"Took":       eval.NumberGetter{Name: "Took", Func: d.getTook},
		},
		Sorters: eval.Sorters[Request]{
			"ID":         {Asc: d.sortAscID, Desc: d.sortDescID},
			"Serial":     {Asc: d.sortAscSerial, Desc: d.sortDescSerial},
			"Attempt":    {Asc: d.sortAscAttempt, Desc: d.sortDescAttempt},
			"Ts":         {Asc: d.sortAscTs, Desc: d.sortDescTs, DescDefault: true},
			"Method":     {Asc: d.sortAscMethod, Desc: d.sortDescMethod},
			"URL":        {Asc: d.sortAscURL, Desc: d.sortDescURL},
			"StatusCode": {Asc: d.sortAscStatusCode, Desc: d.sortDescStatusCode},
			"Status":     {Asc: d.sortAscStatus, Desc: d.sortDescStatus},
			"Proxy":      {Asc: d.sortAscProxy, Desc: d.sortDescProxy},
			"Appeared":   {Asc: d.sortAscAppeared, Desc: d.sortDescAppeared},
			"Took":       {Asc: d.sortAscTook, Desc: d.sortDescTook},
		},
		Facets: func(filtered RequestDataset, topN int) []eval.Facet {
			return eval.FacetRetrievers[Request]{
				eval.StringFacet{
					Getter: filtered.getMethod,
					Field:  "Method",
					Name:   "Method",
				}, eval.StringFacet{
					// TODO: implement as generator feature
					Getter:   filtered.getHostname,
					Contains: true,

					Field: "URL",
					Name:  "Host",
				}, eval.StringFacet{
					// TODO: implement as generator feature
					Getter:   filtered.getStatusFacet,
					Contains: true,

					Field: "Status",
					Name:  "Status",
				}, eval.StringFacet{
					Getter: filtered.getProxy,
					Field:  "Proxy",
					Name:   "Proxy",
				},
			}.Facets(filtered, topN)
		},
	}).Query(query)
}

func (d RequestDataset) getID(record int) float64 {
	return float64(d[record].ID)
}

func (_ RequestDataset) sortAscID(left, right Request) bool {
	return left.ID < right.ID
}

func (_ RequestDataset) sortDescID(left, right Request) bool {
	return left.ID > right.ID
}

func (d RequestDataset) getSerial(record int) float64 {
	return float64(d[record].Serial)
}

func (_ RequestDataset) sortAscSerial(left, right Request) bool {
	return left.Serial < right.Serial
}

func (_ RequestDataset) sortDescSerial(left, right Request) bool {
	return left.Serial > right.Serial
}

func (d RequestDataset) getAttempt(record int) float64 {
	return float64(d[record].Attempt)
}

func (_ RequestDataset) sortAscAttempt(left, right Request) bool {
	return left.Attempt < right.Attempt
}

func (_ RequestDataset) sortDescAttempt(left, right Request) bool {
	return left.Attempt > right.Attempt
}

func (d RequestDataset) getTs(record int) float64 {
	return float64(d[record].Ts.Unix())
}

func (_ RequestDataset) sortAscTs(left, right Request) bool {
	return left.Ts.Unix() < right.Ts.Unix()
}

func (_ RequestDataset) sortDescTs(left, right Request) bool {
	return left.Ts.Unix() > right.Ts.Unix()
}

func (d RequestDataset) getMethod(record int) string {
	return d[record].Method
}

func (_ RequestDataset) sortAscMethod(left, right Request) bool {
	return left.Method < right.Method
}

func (_ RequestDataset) sortDescMethod(left, right Request) bool {
	return left.Method > right.Method
}

func (d RequestDataset) getURL(record int) string {
	return d[record].URL
}

func (_ RequestDataset) sortAscURL(left, right Request) bool {
	return left.URL < right.URL
}

func (_ RequestDataset) sortDescURL(left, right Request) bool {
	return left.URL > right.URL
}

func (d RequestDataset) getStatusCode(record int) float64 {
	return float64(d[record].StatusCode)
}

func (_ RequestDataset) sortAscStatusCode(left, right Request) bool {
	return left.StatusCode < right.StatusCode
}

func (_ RequestDataset) sortDescStatusCode(left, right Request) bool {
	return left.StatusCode > right.StatusCode
}

func (d RequestDataset) getStatus(record int) string {
	return d[record].Status
}

func (_ RequestDataset) sortAscStatus(left, right Request) bool {
	return left.Status < right.Status
}

func (_ RequestDataset) sortDescStatus(left, right Request) bool {
	return left.Status > right.Status
}

func (d RequestDataset) getProxy(record int) string {
	return d[record].Proxy.String()
}

func (_ RequestDataset) sortAscProxy(left, right Request) bool {
	return left.Proxy.String() < right.Proxy.String()
}

func (_ RequestDataset) sortDescProxy(left, right Request) bool {
	return left.Proxy.String() > right.Proxy.String()
}

func (d RequestDataset) getAppeared(record int) float64 {
	return float64(d[record].Appeared)
}

func (_ RequestDataset) sortAscAppeared(left, right Request) bool {
	return left.Appeared < right.Appeared
}

func (_ RequestDataset) sortDescAppeared(left, right Request) bool {
	return left.Appeared > right.Appeared
}

func (d RequestDataset) getTook(record int) float64 {
	return float64(d[record].Took)
}

func (_ RequestDataset) sortAscTook(left, right Request) bool {
	return left.Took < right.Took
}

func (_ RequestDataset) sortDescTook(left, right Request) bool {
	return left.Took > right.Took
}
