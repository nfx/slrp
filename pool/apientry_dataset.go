// Code generated by go run github.com/nfx/slrp/ql/generator/main.go Foo. DO NOT EDIT.
package pool

import (
	"github.com/nfx/slrp/ql/eval"
)

type ApiEntryDataset []ApiEntry

func (d ApiEntryDataset) Query(query string) (*eval.QueryResult[ApiEntry], error) {
	return (&eval.Dataset[ApiEntry, ApiEntryDataset]{
		Source: d,
		Accessors: eval.Accessors{
			"Proxy":          eval.StringGetter{Name: "Proxy", Func: d.getProxy},
			"FirstSeen":      eval.NumberGetter{Name: "FirstSeen", Func: d.getFirstSeen},
			"LastSeen":       eval.NumberGetter{Name: "LastSeen", Func: d.getLastSeen},
			"ReanimateAfter": eval.NumberGetter{Name: "ReanimateAfter", Func: d.getReanimateAfter},
			"Ok":             eval.BooleanGetter{Name: "Ok", Func: d.getOk},
			"Speed":          eval.NumberGetter{Name: "Speed", Func: d.getSpeed},
			"Seen":           eval.NumberGetter{Name: "Seen", Func: d.getSeen},
			"Timeouts":       eval.NumberGetter{Name: "Timeouts", Func: d.getTimeouts},
			"Offered":        eval.NumberGetter{Name: "Offered", Func: d.getOffered},
			"Reanimated":     eval.NumberGetter{Name: "Reanimated", Func: d.getReanimated},
			"Succeed":        eval.NumberGetter{Name: "Succeed", Func: d.getSucceed},
			"Country":        eval.StringGetter{Name: "Country", Func: d.getCountry},
			"Provider":       eval.StringGetter{Name: "Provider", Func: d.getProvider},
			"ASN":            eval.NumberGetter{Name: "ASN", Func: d.getASN},
		},
		Sorters: eval.Sorters[ApiEntry]{
			"Proxy":          {Asc: d.sortAscProxy, Desc: d.sortDescProxy},
			"FirstSeen":      {Asc: d.sortAscFirstSeen, Desc: d.sortDescFirstSeen},
			"LastSeen":       {Asc: d.sortAscLastSeen, Desc: d.sortDescLastSeen, DescDefault: true},
			"ReanimateAfter": {Asc: d.sortAscReanimateAfter, Desc: d.sortDescReanimateAfter},
			"Ok":             {Asc: d.sortAscOk, Desc: d.sortDescOk},
			"Speed":          {Asc: d.sortAscSpeed, Desc: d.sortDescSpeed},
			"Seen":           {Asc: d.sortAscSeen, Desc: d.sortDescSeen},
			"Timeouts":       {Asc: d.sortAscTimeouts, Desc: d.sortDescTimeouts},
			"Offered":        {Asc: d.sortAscOffered, Desc: d.sortDescOffered},
			"Reanimated":     {Asc: d.sortAscReanimated, Desc: d.sortDescReanimated},
			"Succeed":        {Asc: d.sortAscSucceed, Desc: d.sortDescSucceed},
			"Country":        {Asc: d.sortAscCountry, Desc: d.sortDescCountry},
			"Provider":       {Asc: d.sortAscProvider, Desc: d.sortDescProvider},
			"ASN":            {Asc: d.sortAscASN, Desc: d.sortDescASN},
		},
		Facets: func(filtered ApiEntryDataset, topN int) []eval.Facet {
			return eval.FacetRetrievers[ApiEntry]{
				eval.StringFacet{
					Getter: filtered.getProxyProtocol,
					Contains: true,
					Field:  "Proxy",
					Name:   "Protocol",
				}, eval.StringFacet{
					Getter: filtered.getCountry,
					Field:  "Country",
					Name:   "Country",
				},
				eval.NumberRanges{
					Getter:  filtered.getFirstSeen,
					Field:   "FirstSeen",
					Name:    "First seen",
					TimeAgo: true,
				},
				eval.NumberRanges{
					Getter:  filtered.getLastSeen,
					Field:   "LastSeen",
					Name:    "Last seen",
					TimeAgo: true,
				},
				eval.NumberRanges{
					Getter:  filtered.getSpeed,
					Field:   "Speed",
					Name:    "Speed",
					Duration: true,
				},
				eval.NumberRanges{
					Getter:  filtered.getSucceed,
					Field:   "Succeed",
					Name:    "Succeed",
				},
				eval.NumberRanges{
					Getter:  filtered.getOffered,
					Field:   "Offered",
					Name:    "Offered",
				},
			}.Facets(filtered, topN)
		},
	}).Query(query)
}

func (d ApiEntryDataset) getProxy(record int) string {
	return d[record].Proxy.String()
}

func (_ ApiEntryDataset) sortAscProxy(left, right ApiEntry) bool {
	return left.Proxy.String() < right.Proxy.String()
}

func (_ ApiEntryDataset) sortDescProxy(left, right ApiEntry) bool {
	return left.Proxy.String() > right.Proxy.String()
}

func (d ApiEntryDataset) getFirstSeen(record int) float64 {
	return float64(d[record].FirstSeen)
}

func (_ ApiEntryDataset) sortAscFirstSeen(left, right ApiEntry) bool {
	return left.FirstSeen < right.FirstSeen
}

func (_ ApiEntryDataset) sortDescFirstSeen(left, right ApiEntry) bool {
	return left.FirstSeen > right.FirstSeen
}

func (d ApiEntryDataset) getLastSeen(record int) float64 {
	return float64(d[record].LastSeen)
}

func (_ ApiEntryDataset) sortAscLastSeen(left, right ApiEntry) bool {
	return left.LastSeen < right.LastSeen
}

func (_ ApiEntryDataset) sortDescLastSeen(left, right ApiEntry) bool {
	return left.LastSeen > right.LastSeen
}

func (d ApiEntryDataset) getReanimateAfter(record int) float64 {
	return float64(d[record].ReanimateAfter.Unix())
}

func (_ ApiEntryDataset) sortAscReanimateAfter(left, right ApiEntry) bool {
	return left.ReanimateAfter.Unix() < right.ReanimateAfter.Unix()
}

func (_ ApiEntryDataset) sortDescReanimateAfter(left, right ApiEntry) bool {
	return left.ReanimateAfter.Unix() > right.ReanimateAfter.Unix()
}

func (d ApiEntryDataset) getOk(record int) bool {
	return d[record].Ok
}

func (_ ApiEntryDataset) sortAscOk(left, right ApiEntry) bool {
	return left.Ok == right.Ok
}

func (_ ApiEntryDataset) sortDescOk(left, right ApiEntry) bool {
	return left.Ok != right.Ok
}

func (d ApiEntryDataset) getSpeed(record int) float64 {
	return float64(d[record].Speed)
}

func (_ ApiEntryDataset) sortAscSpeed(left, right ApiEntry) bool {
	return left.Speed < right.Speed
}

func (_ ApiEntryDataset) sortDescSpeed(left, right ApiEntry) bool {
	return left.Speed > right.Speed
}

func (d ApiEntryDataset) getSeen(record int) float64 {
	return float64(d[record].Seen)
}

func (_ ApiEntryDataset) sortAscSeen(left, right ApiEntry) bool {
	return left.Seen < right.Seen
}

func (_ ApiEntryDataset) sortDescSeen(left, right ApiEntry) bool {
	return left.Seen > right.Seen
}

func (d ApiEntryDataset) getTimeouts(record int) float64 {
	return float64(d[record].Timeouts)
}

func (_ ApiEntryDataset) sortAscTimeouts(left, right ApiEntry) bool {
	return left.Timeouts < right.Timeouts
}

func (_ ApiEntryDataset) sortDescTimeouts(left, right ApiEntry) bool {
	return left.Timeouts > right.Timeouts
}

func (d ApiEntryDataset) getOffered(record int) float64 {
	return float64(d[record].Offered)
}

func (_ ApiEntryDataset) sortAscOffered(left, right ApiEntry) bool {
	return left.Offered < right.Offered
}

func (_ ApiEntryDataset) sortDescOffered(left, right ApiEntry) bool {
	return left.Offered > right.Offered
}

func (d ApiEntryDataset) getReanimated(record int) float64 {
	return float64(d[record].Reanimated)
}

func (_ ApiEntryDataset) sortAscReanimated(left, right ApiEntry) bool {
	return left.Reanimated < right.Reanimated
}

func (_ ApiEntryDataset) sortDescReanimated(left, right ApiEntry) bool {
	return left.Reanimated > right.Reanimated
}

func (d ApiEntryDataset) getSucceed(record int) float64 {
	return float64(d[record].Succeed)
}

func (_ ApiEntryDataset) sortAscSucceed(left, right ApiEntry) bool {
	return left.Succeed < right.Succeed
}

func (_ ApiEntryDataset) sortDescSucceed(left, right ApiEntry) bool {
	return left.Succeed > right.Succeed
}

func (d ApiEntryDataset) getCountry(record int) string {
	return d[record].Country
}

func (_ ApiEntryDataset) sortAscCountry(left, right ApiEntry) bool {
	return left.Country < right.Country
}

func (_ ApiEntryDataset) sortDescCountry(left, right ApiEntry) bool {
	return left.Country > right.Country
}

func (d ApiEntryDataset) getProvider(record int) string {
	return d[record].Provider
}

func (_ ApiEntryDataset) sortAscProvider(left, right ApiEntry) bool {
	return left.Provider < right.Provider
}

func (_ ApiEntryDataset) sortDescProvider(left, right ApiEntry) bool {
	return left.Provider > right.Provider
}

func (d ApiEntryDataset) getASN(record int) float64 {
	return float64(d[record].ASN)
}

func (_ ApiEntryDataset) sortAscASN(left, right ApiEntry) bool {
	return left.ASN < right.ASN
}

func (_ ApiEntryDataset) sortDescASN(left, right ApiEntry) bool {
	return left.ASN > right.ASN
}
