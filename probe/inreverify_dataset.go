// Code generated by go run github.com/nfx/slrp/ql/generator/main.go Foo. DO NOT EDIT.
package probe

import (
	"github.com/nfx/slrp/ql/eval"
)

type inReverifyDataset []inReverify

func (d inReverifyDataset) Query(query string) (*eval.QueryResult[inReverify], error) {
	return (&eval.Dataset[inReverify, inReverifyDataset]{
		Source: d,
		Accessors: eval.Accessors{
			"Proxy":    eval.StringGetter{Name: "Proxy", Func: d.getProxy},
			"Attempt":  eval.NumberGetter{Name: "Attempt", Func: d.getAttempt},
			"After":    eval.NumberGetter{Name: "After", Func: d.getAfter},
			"Country":  eval.StringGetter{Name: "Country", Func: d.getCountry},
			"Provider": eval.StringGetter{Name: "Provider", Func: d.getProvider},
			"ASN":      eval.NumberGetter{Name: "ASN", Func: d.getASN},
			"Failure":  eval.StringGetter{Name: "Failure", Func: d.getFailure},
		},
		Sorters: eval.Sorters[inReverify]{
			"Proxy":    {Asc: d.sortAscProxy, Desc: d.sortDescProxy},
			"Attempt":  {Asc: d.sortAscAttempt, Desc: d.sortDescAttempt, AscDefault: true},
			"After":    {Asc: d.sortAscAfter, Desc: d.sortDescAfter},
			"Country":  {Asc: d.sortAscCountry, Desc: d.sortDescCountry},
			"Provider": {Asc: d.sortAscProvider, Desc: d.sortDescProvider},
			"ASN":      {Asc: d.sortAscASN, Desc: d.sortDescASN},
			"Failure":  {Asc: d.sortAscFailure, Desc: d.sortDescFailure},
		},
		Facets: func(filtered inReverifyDataset, topN int) []eval.Facet {
			return eval.FacetRetrievers[inReverify]{
				eval.StringFacet{
					Getter: filtered.getCountry,
					Field:  "Country",
					Name:   "Country",
				}, eval.StringFacet{
					Getter: filtered.getProvider,
					Field:  "Provider",
					Name:   "Provider",
				}, eval.StringFacet{
					Getter: filtered.getFailure,
					Field:  "Failure",
					Name:   "Failure",
				},
			}.Facets(filtered, topN)
		},
	}).Query(query)
}

func (d inReverifyDataset) getProxy(record int) string {
	return d[record].Proxy.String()
}

func (_ inReverifyDataset) sortAscProxy(left, right inReverify) bool {
	return left.Proxy.String() < right.Proxy.String()
}

func (_ inReverifyDataset) sortDescProxy(left, right inReverify) bool {
	return left.Proxy.String() > right.Proxy.String()
}

func (d inReverifyDataset) getAttempt(record int) float64 {
	return float64(d[record].Attempt)
}

func (_ inReverifyDataset) sortAscAttempt(left, right inReverify) bool {
	return left.Attempt < right.Attempt
}

func (_ inReverifyDataset) sortDescAttempt(left, right inReverify) bool {
	return left.Attempt > right.Attempt
}

func (d inReverifyDataset) getAfter(record int) float64 {
	return float64(d[record].After.Unix())
}

func (_ inReverifyDataset) sortAscAfter(left, right inReverify) bool {
	return left.After.Unix() < right.After.Unix()
}

func (_ inReverifyDataset) sortDescAfter(left, right inReverify) bool {
	return left.After.Unix() > right.After.Unix()
}

func (d inReverifyDataset) getCountry(record int) string {
	return d[record].Country
}

func (_ inReverifyDataset) sortAscCountry(left, right inReverify) bool {
	return left.Country < right.Country
}

func (_ inReverifyDataset) sortDescCountry(left, right inReverify) bool {
	return left.Country > right.Country
}

func (d inReverifyDataset) getProvider(record int) string {
	return d[record].Provider
}

func (_ inReverifyDataset) sortAscProvider(left, right inReverify) bool {
	return left.Provider < right.Provider
}

func (_ inReverifyDataset) sortDescProvider(left, right inReverify) bool {
	return left.Provider > right.Provider
}

func (d inReverifyDataset) getASN(record int) float64 {
	return float64(d[record].ASN)
}

func (_ inReverifyDataset) sortAscASN(left, right inReverify) bool {
	return left.ASN < right.ASN
}

func (_ inReverifyDataset) sortDescASN(left, right inReverify) bool {
	return left.ASN > right.ASN
}

func (d inReverifyDataset) getFailure(record int) string {
	return d[record].Failure
}

func (_ inReverifyDataset) sortAscFailure(left, right inReverify) bool {
	return left.Failure < right.Failure
}

func (_ inReverifyDataset) sortDescFailure(left, right inReverify) bool {
	return left.Failure > right.Failure
}
