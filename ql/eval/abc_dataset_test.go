// Code generated by go run github.com/nfx/slrp/ql/generator/main.go Foo. DO NOT EDIT.
package eval

type AbcDataset []Abc

func (d AbcDataset) Query(query string) (*QueryResult[Abc], error) {
	return (&Dataset[Abc, AbcDataset]{
		Source: d,
		Accessors: Accessors{
			"Bar":    NumberGetter{"Bar", d.getBar},
			"Bore":   NumberGetter{"Bore", d.getBore},
			"Zoom":   StringGetter{"Zoom", d.getZoom},
			"Zuul":   StringGetter{"Zuul", d.getZuul},
			"Foo":    StringGetter{"Foo", d.getFoo},
			"Active": BooleanGetter{"Active", d.getActive},
		},
		Sorters: Sorters[Abc]{
			"Bar":    {Asc: d.sortAscBar, Desc: d.sortDescBar},
			"Bore":   {Asc: d.sortAscBore, Desc: d.sortDescBore},
			"Zoom":   {Asc: d.sortAscZoom, Desc: d.sortDescZoom},
			"Zuul":   {Asc: d.sortAscZuul, Desc: d.sortDescZuul},
			"Foo":    {Asc: d.sortAscFoo, Desc: d.sortDescFoo},
			"Active": {Asc: d.sortAscActive, Desc: d.sortDescActive},
		},
		Facets: func(r AbcDataset, i int) []Facet {
			return FacetRetrievers[Abc]{
				StringFacet{
					Getter: r.getZoom,
					Field:  "Zoom",
					Name:   "Zooms",
				}, StringFacet{
					Getter: r.getZuul,
					Field:  "Zuul",
					Name:   "Zuuls",
				}, StringFacet{
					Getter: r.getFoo,
					Field:  "Foo",
					Name:   "Category",
				},
			}.Facets(r, i)
		},
	}).Query(query)
}

func (d AbcDataset) getBar(record int) float64 {
	return float64(d[record].Bar)
}

func (_ AbcDataset) sortAscBar(left, right Abc) bool {
	return left.Bar < right.Bar
}

func (_ AbcDataset) sortDescBar(left, right Abc) bool {
	return left.Bar > right.Bar
}

func (d AbcDataset) getBore(record int) float64 {
	return float64(d[record].Bore)
}

func (_ AbcDataset) sortAscBore(left, right Abc) bool {
	return left.Bore < right.Bore
}

func (_ AbcDataset) sortDescBore(left, right Abc) bool {
	return left.Bore > right.Bore
}

func (d AbcDataset) getZoom(record int) string {
	return d[record].Zoom
}

func (_ AbcDataset) sortAscZoom(left, right Abc) bool {
	return left.Zoom < right.Zoom
}

func (_ AbcDataset) sortDescZoom(left, right Abc) bool {
	return left.Zoom > right.Zoom
}

func (d AbcDataset) getZuul(record int) string {
	return d[record].Zuul
}

func (_ AbcDataset) sortAscZuul(left, right Abc) bool {
	return left.Zuul < right.Zuul
}

func (_ AbcDataset) sortDescZuul(left, right Abc) bool {
	return left.Zuul > right.Zuul
}

func (d AbcDataset) getFoo(record int) string {
	return d[record].Foo
}

func (_ AbcDataset) sortAscFoo(left, right Abc) bool {
	return left.Foo < right.Foo
}

func (_ AbcDataset) sortDescFoo(left, right Abc) bool {
	return left.Foo > right.Foo
}

func (d AbcDataset) getActive(record int) bool {
	return d[record].Active
}

func (_ AbcDataset) sortAscActive(left, right Abc) bool {
	return left.Active == right.Active
}

func (_ AbcDataset) sortDescActive(left, right Abc) bool {
	return left.Active != right.Active
}
